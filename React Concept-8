
---

## 🕓 `setTimeout()` – "Wait and run **once**"

### ✅ What it does:

> Waits for a certain time, then runs the function **only one time**.

### 📦 Syntax:

```js
setTimeout(() => {
  // code to run once after the time
}, 2000); // wait 2 seconds (2000 ms)
```

### 🧪 Example:

```js
setTimeout(() => {
  console.log("Hello after 3 seconds");
}, 3000);
```

✅ Output (after 3 seconds):

```
Hello after 3 seconds
```

---

## 🔁 `setInterval()` – "Repeat again and again"

### ✅ What it does:

> Runs the function **again and again** every time the interval passes.

### 📦 Syntax:

```js
setInterval(() => {
  // code to run again and again
}, 1000); // every 1 second
```

### 🧪 Example:

```js
setInterval(() => {
  console.log("Tick");
}, 1000);
```

✅ Output:

```
Tick   (after 1 sec)
Tick   (after 2 sec)
Tick   (after 3 sec)
... and so on
```

---

## ❌ How to Stop Them

### 🔻 `clearTimeout(timerId)`

* Stops a **scheduled timeout** from running.

### 🔁 `clearInterval(timerId)`

* Stops a **repeating interval** from running.

---

### 🧪 Example: Stop a timer

```js
const timeoutId = setTimeout(() => {
  console.log("This will not run");
}, 5000);

clearTimeout(timeoutId); // ❌ stops the above before it runs
```

---

### 🧪 Example: Stop a repeating interval

```js
const intervalId = setInterval(() => {
  console.log("Ticking...");
}, 1000);

setTimeout(() => {
  clearInterval(intervalId); // ⛔ stop it after 5 seconds
  console.log("Stopped ticking");
}, 5000);
```

✅ Output:

```
Ticking...
Ticking...
Ticking...
Ticking...
Ticking...
Stopped ticking
```

---

## ✅ Summary Table

| Function        | What it does                         | Stops with        |
| --------------- | ------------------------------------ | ----------------- |
| `setTimeout()`  | Runs a function **once after delay** | `clearTimeout()`  |
| `setInterval()` | Runs a function **repeatedly**       | `clearInterval()` |

---
