
---

## 🧭 `navigator` — the browser's info center

### 🔹 What is it?

The `navigator` object gives information about the **browser** and the **device** running the webpage.

### 📦 Provided by:

The **browser**, not JavaScript itself. It's part of the **Web APIs** that browsers expose to JS.

---

### 🧪 Common uses of `navigator`:

| Feature                 | Example                                | What it does                                 |
| ----------------------- | -------------------------------------- | -------------------------------------------- |
| `navigator.geolocation` | Get user’s location (with permission)  | `navigator.geolocation.getCurrentPosition()` |
| `navigator.userAgent`   | Info about the browser/device          | `"Mozilla/5.0..."`                           |
| `navigator.onLine`      | Is the user connected to the internet? | `true` or `false`                            |
| `navigator.language`    | Get browser language                   | `"en-US"`                                    |

---

### ✅ Example:

```js
navigator.geolocation.getCurrentPosition((position) => {
  console.log(position.coords.latitude, position.coords.longitude);
});
```

> Asks for permission and gives the user's current GPS location.

---

## 💾 `localStorage` — mini browser database

### 🔹 What is it?

`localStorage` is a place where you can **store small bits of data** (like strings) that stay saved even after you close the browser.

### 📦 Also provided by:

The **browser** (part of Web Storage API). Data is saved **per site** (origin-based).

---

### ⚙️ How it works:

* Stores data as **key-value** pairs.
* All data is stored as **strings**.
* Max size: around **5MB**.
* **Doesn't expire** (unless user clears browser or you remove it manually).

---

### ✅ Example:

```js
localStorage.setItem("username", "Aswin");

const user = localStorage.getItem("username");
console.log(user); // "Aswin"

localStorage.removeItem("username"); // deletes the key
```

---

## 🧠 Summary Table:

| Feature      | `navigator`                          | `localStorage`                      |
| ------------ | ------------------------------------ | ----------------------------------- |
| What it does | Gives browser/device info            | Stores key-value data in browser    |
| Example use  | Geolocation, online status, language | Save user preferences, session data |
| Lifespan     | As long as the browser session runs  | Until manually cleared              |
| Data type    | Read-only info                       | Read/write strings                  |

---

## ✅ What is `localStorage`?

**In simple terms:**

> `localStorage` is a small storage space **in your browser** where websites can **save information**, even after you close or refresh the page.

It works like a **notebook** your browser keeps for each website.

---

## 🔑 Key Features:

* Stores data as **key-value pairs**
* All values are saved as **strings**
* Data **does not expire** (stays until deleted manually)
* Can store up to **\~5MB** of data
* Works only on the **same website (origin)**

---

## 🛠 Common Uses:

* Remember user settings (dark mode, language)
* Save selected items (cart, favorites)
* Store simple app data without a backend

---

## 📦 Basic Examples:

### ▶️ 1. **Save data:**

```js
localStorage.setItem("name", "Aswin");
```

### ▶️ 2. **Get data:**

```js
const name = localStorage.getItem("name");
console.log(name); // Aswin
```

### ▶️ 3. **Update data:**

Just call `.setItem()` again:

```js
localStorage.setItem("name", "Aswin T");
```

### ▶️ 4. **Remove data:**

```js
localStorage.removeItem("name");
```

### ▶️ 5. **Clear all data:**

```js
localStorage.clear();
```

---

## 📦 Example with Array:

You must convert arrays or objects to strings:

```js
const fruits = ["apple", "banana", "mango"];

// Save to localStorage
localStorage.setItem("myFruits", JSON.stringify(fruits));

// Get from localStorage
const savedFruits = JSON.parse(localStorage.getItem("myFruits"));
console.log(savedFruits); // ["apple", "banana", "mango"]
```

---

## 🎯 Real-Life Example:

In your **Place Picker App**, you used:

```js
localStorage.setItem("selectedPlaces", JSON.stringify([id, ...storedIds]));
```

This saves the places the user selects, so even if they refresh the page, the app remembers their choices.

---

## 🧠 In Short:

> Think of `localStorage` like a **sticky note** that a website leaves in your browser — and it sticks even when you leave or reload the page.

---


